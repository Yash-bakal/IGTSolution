
1. @SpringBootApplication

@SpringBootApplication annotation can be used to enable those three features, that is:

@EnableAutoConfiguration: enable Spring Boot’s auto-configuration mechanism
@ComponentScan: enable @Component scan on the package where the application is located (see the best practices)
@Configuration: allow to register extra beans in the context or import additional configuration classes


2. @RestController

@RestController annotation in order to simplify the creation of RESTful web services.
 It's a convenient annotation that combines @Controller and @ResponseBody, which eliminates the need to annotate every request handling method of the controller class with the @ResponseBody annotation.


3.  @Controller

Spring @Controller annotation is also a specialization of @Component annotation.
 The @Controller annotation indicates that a particular class serves the role of a controller. 
Spring Controller annotation is typically used in combination with annotated handler methods based on the @RequestMapping annotation. 
It can be applied to classes only. It’s used to mark a class as a web request handler. It’s mostly used with Spring MVC applications. 
This annotation acts as a stereotype for the annotated class, indicating its role. 
The dispatcher scans such annotated classes for mapped methods and detects @RequestMapping annotations.


4. diff @Restcontroller and @Controller

@Controller is used to declare common web controllers which can return HTTP response but @RestController is used to create controllers for REST APIs which can return JSON. 
In Spring MVC, both @Controller and @RestController annotations are used to define web controllers as per MVC Design pattern.


5. @Autowired

Spring @Autowired annotation is used for automatic dependency injection. 
Spring framework is built on dependency injection and we inject the class dependencies through spring bean configuration file.


6. @Service

It is used to mark the class as a service provider.
 So overall @Service annotation is used with classes that provide some business functionalities.
 Spring context will autodetect these classes when annotation-based configuration and classpath scanning is used.


7. @GetMapping

The GET HTTP request is used to get single or multiple resources and @GetMapping annotation for mapping HTTP GET requests onto specific handler methods.
 Specifically, @GetMapping is a composed annotation that acts as a shortcut for @RequestMapping(method = RequestMethod. GET).


8. @PostMapping

The @PostMapping is a specialized version of @RequestMapping annotation that acts as a shortcut for @RequestMapping(method = RequestMethod.POST).
The @PostMapping annotated methods handle the HTTP POST requests matched with the given URI expression.


9. @PutMapping

@PutMapping annotation is used for mapping HTTP PUT requests onto specific handler methods. 
Specifically, @PutMapping is a composed annotation that acts as a shortcut for @RequestMapping(method = RequestMethod. PUT).


10. @DeleteMapping

Annotation for mapping HTTP DELETE requests onto specific handler methods.
 Specifically, @DeleteMapping is a composed annotation that acts as a shortcut for @RequestMapping(method = RequestMethod. DELETE) .


11. @Entity

The Customer class is annotated with @Entity , indicating that it is a JPA entity. 
(Because no @Table annotation exists, it is assumed that this entity is mapped to a table named Customer .) 
The Customer object's id property is annotated with @Id so that JPA recognizes it as the object's ID.


12. @Id

The @Id annotation is inherited from javax.persistence.Id, indicating the member field below is the primary key of the current entity.
 Hence your Hibernate and spring framework as well as you can do some reflect works based on this annotation.


13. @transient

@Transient annotation is used to mark a field to be transient for the mapping framework, 
which means the field marked with @Transient is ignored by mapping framework and the field not mapped to any database column (in RDBMS) or Document property (in NOSQL).


14. @Column

@Column annotation is used for Adding the column the name in the table of a particular MySQL database. 
Attribute: Name: The name of the column. length: The column length.


15. @genetratedValue

@GeneratedValue: This annotation is used to specify the primary key generation strategy to use. i.e Instructs database to generate a value for this field automatically. 
If the strategy is not specified by default AUTO will be used.


16. @OneToOne

Annotation Type OneToOne. Defines a single-valued association to another entity that has one-to-one multiplicity.
 It is not normally necessary to specify the associated target entity explicitly since it can usually be inferred from the type of the object being referenced.


17. @OneTomany

The @OneToMany annotation is from the java persistence API specification. 
This annotation represents that a collection of objects are direct children of the current entity.


18.   @manayTomany

We use @ManyToMany annotation to create a many-to-many relationship between two entities. 
In a bi-directional association, the @ManyToMany annotation is used on both the entities but only one entity can be the owner of the relationship.


19. @manyToOne

The many-to-one mapping or association means that one parent record can have multiple child records.
 In other words, multiple records of a table can associate themselves with a common record in another table.


20. @Bean

Spring @Bean Annotation is applied on a method to specify that it returns a bean to be managed by Spring context.
 Spring Bean annotation is usually declared in Configuration classes methods. In this case, bean methods may reference other @Bean methods in the same class by calling them directly.


21. @PathVariable

The @PathVariable annotation is used to extract the value of the template variables and assign their value to a method variable. 
A Spring controller method to process above example is shown below; @RequestMapping("/users/{userid}", method=RequestMethod.


22. @RequestBody

 @RequestBody annotation maps the HttpRequest body to a transfer or domain object, enabling automatic deserialization of the inbound HttpRequest body onto a Java object. Spring automatically deserializes the JSON into a Java type, assuming an appropriate one is specified.
The @RequestBody annotation is applicable to handler methods of Spring controllers. This annotation indicates that Spring should deserialize a request body into an object. This object is passed as a handler method parameter.







